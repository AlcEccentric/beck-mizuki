//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BgmUser = newBgmUserTable("public", "bgm_user", "")

type bgmUserTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	Nickname       postgres.ColumnString
	AvatarURL      postgres.ColumnString
	LastActiveTime postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BgmUserTable struct {
	bgmUserTable

	EXCLUDED bgmUserTable
}

// AS creates new BgmUserTable with assigned alias
func (a BgmUserTable) AS(alias string) *BgmUserTable {
	return newBgmUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BgmUserTable with assigned schema name
func (a BgmUserTable) FromSchema(schemaName string) *BgmUserTable {
	return newBgmUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BgmUserTable with assigned table prefix
func (a BgmUserTable) WithPrefix(prefix string) *BgmUserTable {
	return newBgmUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BgmUserTable with assigned table suffix
func (a BgmUserTable) WithSuffix(suffix string) *BgmUserTable {
	return newBgmUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBgmUserTable(schemaName, tableName, alias string) *BgmUserTable {
	return &BgmUserTable{
		bgmUserTable: newBgmUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newBgmUserTableImpl("", "excluded", ""),
	}
}

func newBgmUserTableImpl(schemaName, tableName, alias string) bgmUserTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		NicknameColumn       = postgres.StringColumn("nickname")
		AvatarURLColumn      = postgres.StringColumn("avatar_url")
		LastActiveTimeColumn = postgres.TimestampzColumn("last_active_time")
		allColumns           = postgres.ColumnList{IDColumn, NicknameColumn, AvatarURLColumn, LastActiveTimeColumn}
		mutableColumns       = postgres.ColumnList{NicknameColumn, AvatarURLColumn, LastActiveTimeColumn}
	)

	return bgmUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Nickname:       NicknameColumn,
		AvatarURL:      AvatarURLColumn,
		LastActiveTime: LastActiveTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
