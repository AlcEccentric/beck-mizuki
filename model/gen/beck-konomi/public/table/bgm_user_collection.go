//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BgmUserCollection = newBgmUserCollectionTable("public", "bgm_user_collection", "")

type bgmUserCollectionTable struct {
	postgres.Table

	// Columns
	UserID         postgres.ColumnString
	SubjectID      postgres.ColumnString
	SubjectType    postgres.ColumnInteger
	CollectionType postgres.ColumnInteger
	CollectedTime  postgres.ColumnTimestampz
	Rating         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BgmUserCollectionTable struct {
	bgmUserCollectionTable

	EXCLUDED bgmUserCollectionTable
}

// AS creates new BgmUserCollectionTable with assigned alias
func (a BgmUserCollectionTable) AS(alias string) *BgmUserCollectionTable {
	return newBgmUserCollectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BgmUserCollectionTable with assigned schema name
func (a BgmUserCollectionTable) FromSchema(schemaName string) *BgmUserCollectionTable {
	return newBgmUserCollectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BgmUserCollectionTable with assigned table prefix
func (a BgmUserCollectionTable) WithPrefix(prefix string) *BgmUserCollectionTable {
	return newBgmUserCollectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BgmUserCollectionTable with assigned table suffix
func (a BgmUserCollectionTable) WithSuffix(suffix string) *BgmUserCollectionTable {
	return newBgmUserCollectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBgmUserCollectionTable(schemaName, tableName, alias string) *BgmUserCollectionTable {
	return &BgmUserCollectionTable{
		bgmUserCollectionTable: newBgmUserCollectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newBgmUserCollectionTableImpl("", "excluded", ""),
	}
}

func newBgmUserCollectionTableImpl(schemaName, tableName, alias string) bgmUserCollectionTable {
	var (
		UserIDColumn         = postgres.StringColumn("user_id")
		SubjectIDColumn      = postgres.StringColumn("subject_id")
		SubjectTypeColumn    = postgres.IntegerColumn("subject_type")
		CollectionTypeColumn = postgres.IntegerColumn("collection_type")
		CollectedTimeColumn  = postgres.TimestampzColumn("collected_time")
		RatingColumn         = postgres.IntegerColumn("rating")
		allColumns           = postgres.ColumnList{UserIDColumn, SubjectIDColumn, SubjectTypeColumn, CollectionTypeColumn, CollectedTimeColumn, RatingColumn}
		mutableColumns       = postgres.ColumnList{SubjectTypeColumn, CollectionTypeColumn, CollectedTimeColumn, RatingColumn}
	)

	return bgmUserCollectionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:         UserIDColumn,
		SubjectID:      SubjectIDColumn,
		SubjectType:    SubjectTypeColumn,
		CollectionType: CollectionTypeColumn,
		CollectedTime:  CollectedTimeColumn,
		Rating:         RatingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
